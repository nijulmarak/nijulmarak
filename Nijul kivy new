from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
import random

def predict_next_round(history):  
    odd_count = sum(1 for x in history if int(x) % 2 == 1)  
    even_count = len(history) - odd_count  
    return "Odd" if odd_count > even_count else "Even"

def estimate_high_multiplier(history):  
    high_rounds = [i for i, x in enumerate(history) if x >= 10]  
    if len(high_rounds) < 2:  
        return "Not enough data"  
    avg_gap = sum(high_rounds[i] - high_rounds[i - 1] for i in range(1, len(high_rounds))) / (len(high_rounds) - 1)  
    return f"Likely in {round(avg_gap)} rounds"

def betting_strategy(history, risk_level="medium"):  
    next_trend = predict_next_round(history)  
    high_estimate = estimate_high_multiplier(history)  
    bet_range = {  
        "low": "1.2x - 2x (Safe Bet)",  
        "medium": "1.5x - 3x (Balanced)",  
        "high": "3x - 10x (Risky)"  
    }  
    return {  
        "Next Round Prediction": next_trend,  
        "High Multiplier Estimate": high_estimate,  
        "Suggested Bet": f"Bet on {next_trend} multipliers with range {bet_range[risk_level]}"  
    }

class BettingApp(App):  
    def build(self):  
        self.history = [round(random.uniform(1.0, 50.0), 2) for _ in range(20)]  
        layout = BoxLayout(orientation='vertical', padding=10, spacing=10)  
        
        self.result_label = Label(text="Welcome to Betting Predictor!", font_size=20)  
        layout.add_widget(self.result_label)  
        
        self.input_text = TextInput(hint_text="Enter risk level (low, medium, high)", multiline=False)  
        layout.add_widget(self.input_text)  
        
        predict_button = Button(text="Predict Next Bet", on_press=self.predict_bet)  
        layout.add_widget(predict_button)  
        
        return layout  
    
    def predict_bet(self, instance):  
        risk_level = self.input_text.text.lower()  
        if risk_level not in ["low", "medium", "high"]:  
            self.result_label.text = "Invalid risk level! Choose low, medium, or high."  
        else:  
            strategy = betting_strategy(self.history, risk_level)  
            self.result_label.text = f"Next: {strategy['Next Round Prediction']}\\nHigh Multiplier: {strategy['High Multiplier Estimate']}\\nBet Range: {strategy['Suggested Bet']}"  

if __name__ == "__main__":  
    BettingApp().run()
